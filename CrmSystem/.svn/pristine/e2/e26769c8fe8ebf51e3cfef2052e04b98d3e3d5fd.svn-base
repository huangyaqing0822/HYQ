package com.lxit.crmsystem.service.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.lxit.crmsystem.dao.MarketForecastDao;
import com.lxit.crmsystem.entity.DataDictionary;
import com.lxit.crmsystem.entity.Department;
import com.lxit.crmsystem.entity.MarketForecast;
import com.lxit.crmsystem.service.MarketForecastService;
import com.lxit.crmsystem.util.Pager;
import com.lxit.crmsystem.vo.MarketForecastVo;

@Service
public class MarketForecastServiceImpl implements MarketForecastService {

	@Autowired
	private MarketForecastDao marketForecastDao;
	
	public MarketForecastDao getMarketForecastDao() {
		return marketForecastDao;
	}

	public void setMarketForecastDao(MarketForecastDao marketForecastDao) {
		this.marketForecastDao = marketForecastDao;
	}
	@Override
	public int getSumCount(Object[] date) {
		return getMarketForecastDao().getSumCount(date);
	}

	@Override
	public Pager<MarketForecast> selectByLike(int pageIndex, int pageSize, String date) {
		
		Pager<MarketForecast> pager = new Pager<MarketForecast>();
		pager.setPageIndex(pageIndex);
		pager.setPageSize(pageSize);
		Object [] obj = {date};
		pager.setSumCount(this.getSumCount(obj));
		
		System.out.println(" date : "+date);
		
		Map<String, Object> map=new HashMap<>();
		map.put("pageIndex", (pageIndex - 1) * pageSize);
		map.put("pageSize", pageSize);
		map.put("date", date);
		
		List<MarketForecast> list = marketForecastDao.selectByLike(map);
		System.out.println(list+"===list");
		pager.setData(list);
		return pager;
	}

	@Override
	public MarketForecastVo getById(int forecastId) {
		return marketForecastDao.getById(forecastId);
	}

 

	@Override
	public List<DataDictionary> queryDateCode() {
		return marketForecastDao.queryDateCode();
	}

	@Override
	public int addMarketForecast(MarketForecast mark) {
		return marketForecastDao.addMarketForecast(mark);
	}

 



	 

	

}
