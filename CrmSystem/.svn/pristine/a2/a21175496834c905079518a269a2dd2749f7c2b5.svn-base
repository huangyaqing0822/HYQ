package com.lxit.crmsystem.service.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.lxit.crmsystem.dao.MarketDao;
import com.lxit.crmsystem.entity.Market;
import com.lxit.crmsystem.service.MarketService;
import com.lxit.crmsystem.util.Pager;
import com.lxit.crmsystem.vo.Markets;

@Service
public class MarketServiceImpl implements MarketService {
	
	@Autowired
	private MarketDao marketDao;

	public MarketDao getMarketDao() {
		return marketDao;
	}

	public void setMarketDao(MarketDao marketDao) {
		this.marketDao = marketDao;
	}
	
	@Override
	public int addMarket(Market market){
		return marketDao.addMarket(market);
	}
	
	@Override
	public int delMarket(int marketId){
		return marketDao.delMarket(marketId);
	}
	
	@Override
	public int updateMarket(Market market){
		return marketDao.updateMarket(market);
	}
	
	@Override
	public Market queryById(int marketId){
		return marketDao.queryById(marketId);
	} 
	
	@Override
	public int getSumCount(Object [] date){
		return marketDao.getSumCount(date);
	}
	@Override
	public List<Market> listMarket(){
		return marketDao.listMarket();
	}
	 
	@Override 
	public Pager<Markets> selectByLike(int pageIndex,int pageSize,String date,int marketId){
		Pager<Markets> pager = new Pager<Markets>();
		pager.setPageIndex(pageIndex);
		pager.setPageSize(pageSize);
		Object [] obj = {date,marketId};
		pager.setSumCount(this.getSumCount(obj));
		
		System.out.println("marketId : "+marketId+" date : "+date);
		
		Map<String, Object> map=new HashMap<>();
		map.put("pageIndex", (pageIndex - 1) * pageSize);
		map.put("pageSize", pageSize);
		map.put("date", date);
		map.put("marketId", marketId);
		
		List<Markets> list = marketDao.selectByLike(map);
		System.out.println(list+"===list");
		pager.setData(list);
		return pager;
	}

	@Override
	public int updateMarketStates(Market market) {
		return marketDao.updateMarketStates(market);
	}

}
